[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\n#Published: https://uoe-maths.shinyapps.io/SY2-EstimatorTheory/\r\n\r\n\r\n\r\n\r\n\r\nz_test_power <- function(mu_star_case = 0, \r\n                         alt = c(\"neq\",\"<\",\">\"),\r\n                         mu_0 = 0, sigma2 = 1, n = 10,\r\n                         alpha = 0.05, plot = TRUE, show_all = FALSE){\r\n \r\n mu_star <- mu_0 + seq(-3.5, 3.5, by=0.01)\r\n \r\n mu_star_case <- max(mu_star_case, min(mu_star))\r\n mu_star_case <- min(mu_star_case, max(mu_star))\r\n alt <- match.arg(alt,c(\"neq\",\"<\",\">\"))\r\n mu_0 <- max(mu_0, min(mu_star))\r\n mu_0 <- min(mu_0, max(mu_star))\r\n sigma2 <- max(sigma2, sqrt(.Machine$double.eps))\r\n n <- ceiling(max(n,2))\r\n alpha <- max(alpha,0)\r\n alpha <- min(alpha,1)\r\n \r\n \r\n if(alt==\"neq\"){\r\n  POWER_VALUE <- pnorm(-qnorm(1-alpha/2)-(mu_star_case - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1) + \r\n   1 - pnorm(qnorm(1-alpha/2)-(mu_star_case - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1)\r\n }else if(alt==\"<\"){\r\n  POWER_VALUE <- pnorm(-qnorm(1-alpha)-(mu_star_case - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1)\r\n }else{\r\n  POWER_VALUE <- 1 - pnorm(qnorm(1-alpha)-(mu_star_case - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1)\r\n }\r\n if(!plot){return(POWER_VALUE)}\r\n \r\n #mu_0 <- 0\r\n #mu_star_case <- 0.5\r\n #alt <- c(\"neq\",\"<\",\">\")[3]\r\n #sigma2 <- 4\r\n #n <- 30\r\n #alpha <- 0.1\r\n \r\n pow_2 <- pnorm(-qnorm(1-alpha/2)-(mu_star - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1) + \r\n  1 - pnorm(qnorm(1-alpha/2)-(mu_star - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1) \r\n pow_low <- pnorm(-qnorm(1-alpha)-(mu_star - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1) \r\n pow_upp <- 1 - pnorm(qnorm(1-alpha)-(mu_star - mu_0)/sqrt(sigma2/n), mean = 0, sd = 1) \r\n \r\n par(mfrow=c(2,1))\r\n plot(mu_star, pow_2, type=\"n\",ylim=c(0,1), ylab=\"Power\", main = \"Power Curve, Z-test\",\r\n      xlab = expression(mu^\"*\"),cex.lab = 1.2)\r\n grid()\r\n abline(h = alpha, lty=2)\r\n if(show_all | alt == \"neq\") lines(mu_star, pow_2, col=2,lwd=2)\r\n if(show_all | alt == \"<\") lines(mu_star, pow_low, col=3,lwd=2)\r\n if(show_all | alt == \">\") lines(mu_star, pow_upp, col=4,lwd=2)\r\n points(mu_star_case,POWER_VALUE,pch=16,cex=2) \r\n \r\n #mu_star_case <- sample(mu_star,size=1)\r\n \r\n x <- seq(-8,8,by=0.01)\r\n z_h0 <- dnorm(x,mean=0,sd=1)\r\n z_h1 <- dnorm(x - (mu_star_case-mu_0)/sqrt(sigma2/n),mean=0,sd=1)\r\n \r\n plot(NA,NA,xlab=\"z\",ylab=\"f(z)\",xlim=range(x),ylim=c(0,max(z_h0,z_h1)), \r\n      main = \"Distribution of the Test Statistic\")\r\n if(alt==\"neq\"){\r\n  z1 <- qnorm(alpha/2)\r\n  z2 <- qnorm(1-alpha/2)\r\n  polygon(c(min(x),x[x<z1],z1,z1),\r\n          c(0,z_h0[x<z1],dnorm(z1),0), col=2,density = 20,angle = -45)\r\n  polygon(c(z2,z2,x[x>z2],max(x)),\r\n          c(0,dnorm(z2),z_h0[x>z2],0),col=2,density = 20,angle = -45)\r\n  polygon(c(min(x),x[x<z1],z1,z1),\r\n          c(0,z_h1[x<z1],dnorm(z1 - (mu_star_case-mu_0)/sqrt(sigma2/n)),0), col=3,density=20)\r\n  polygon(c(z2,z2,x[x>z2],max(x)),\r\n          c(0,dnorm(z2 - (mu_star_case-mu_0)/sqrt(sigma2/n)),z_h1[x>z2],0),col=3,density = 20)\r\n  abline(v=c(z1,z2),lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=2)\r\n  \r\n }else if(alt==\"<\"){\r\n  z<- qnorm(alpha)\r\n  polygon(c(min(x),x[x<z],z,z),\r\n          c(0,z_h0[x<z],dnorm(z),0), col=2,density = 20,angle = -45)\r\n  polygon(c(min(x),x[x<z],z,z),\r\n          c(0,z_h1[x<z],dnorm(z - (mu_star_case-mu_0)/sqrt(sigma2/n)),0), col=3,density=20)\r\n  abline(v=z,lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=3)\r\n  \r\n }else{\r\n  z <- qnorm(1-alpha)\r\n  polygon(c(z,z,x[x>z],max(x)),\r\n          c(0,dnorm(z),z_h0[x>z],0),col=2,density = 20,angle = -45)\r\n  polygon(c(z,z,x[x>z],max(x)),\r\n          c(0,dnorm(z-(mu_star_case-mu_0)/sqrt(sigma2/n)),z_h1[x>z],0),col=3,density = 20)\r\n  abline(v=z,lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=4)\r\n }\r\n \r\n lines(x,z_h0,lwd=2)\r\n abline(v = 0,lty=2)\r\n abline(v = (mu_star_case-mu_0)/sqrt(sigma2/n),lty=2)\r\n \r\n \r\n return(invisible(POWER_VALUE))\r\n \r\n}\r\n\r\n\r\n\r\none_sample_t_test_power <- function(mu_star_case = 0, \r\n                                    alt = c(\"neq\",\"<\",\">\"),\r\n                                    mu_0 = 0, s2 = 1, n = 10,\r\n                                    alpha = 0.05, plot = TRUE, show_all = FALSE){\r\n \r\n mu_star <- mu_0 + seq(-3.5, 3.5, by=0.01)\r\n \r\n \r\n mu_star_case <- max(mu_star_case, min(mu_star))\r\n mu_star_case <- min(mu_star_case, max(mu_star))\r\n alt <- match.arg(alt,c(\"neq\",\"<\",\">\"))\r\n mu_0 <- max(mu_0, min(mu_star))\r\n mu_0 <- min(mu_0, max(mu_star))\r\n s2 <- max(s2, sqrt(.Machine$double.eps))\r\n n <- ceiling(max(n,2))\r\n alpha <- max(alpha,0)\r\n alpha <- min(alpha,1)\r\n \r\n \r\n if(alt==\"neq\"){\r\n  POWER_VALUE <- pt(-qt(1-alpha/2, df=n-1)-(mu_star_case - mu_0)/sqrt(s2/n), df=n-1) + \r\n   1 - pt(qt(1-alpha/2, df=n-1)-(mu_star_case - mu_0)/sqrt(s2/n), df=n-1)\r\n }else if(alt==\"<\"){\r\n  POWER_VALUE <- pt(-qt(1-alpha, df=n-1)-(mu_star_case - mu_0)/sqrt(s2/n), df=n-1)\r\n }else{\r\n  POWER_VALUE <- 1 - pt(qt(1-alpha, df=n-1)-(mu_star_case - mu_0)/sqrt(s2/n), df=n-1)\r\n }\r\n if(!plot) return(POWER_VALUE)\r\n \r\n \r\n pow_2 <- pt(-qt(1-alpha/2, df=n-1)-(mu_star - mu_0)/sqrt(s2/n), df=n-1) + \r\n  1 - pt(qt(1-alpha/2, df=n-1)-(mu_star - mu_0)/sqrt(s2/n), df=n-1) \r\n pow_low <- pt(-qt(1-alpha, df=n-1)-(mu_star - mu_0)/sqrt(s2/n), df=n-1) \r\n pow_upp <- 1 - pt(qt(1-alpha, df=n-1)-(mu_star - mu_0)/sqrt(s2/n), df=n-1) \r\n \r\n par(mfrow=c(2,1))\r\n plot(mu_star, pow_2, type=\"n\",ylim=c(0,1), ylab=\"Power\", main = \"Power Curve, one-sample t-test\",\r\n      xlab = expression(mu^\"*\"),cex.lab = 1.2) \r\n grid()\r\n abline(h = alpha, lty=2)\r\n if(show_all | alt == \"neq\")lines(mu_star, pow_2, col=2,lwd=2)\r\n if(show_all | alt == \"<\")lines(mu_star, pow_low, col=3,lwd=2)\r\n if(show_all | alt == \">\")lines(mu_star, pow_upp, col=4,lwd=2)\r\n points(mu_star_case,POWER_VALUE,pch=16,cex=2) \r\n \r\n \r\n x <- seq(-8,8,by=0.01)\r\n z_h0 <- dt(x,df = n-1)\r\n z_h1 <- dt(x-(mu_star_case-mu_0)/sqrt(s2/n), df=n-1)\r\n \r\n plot(NA,NA,xlab=\"t\",ylab=\"f(t)\",xlim=range(x),ylim=c(0,max(z_h0,z_h1)), \r\n      main = \"Distribution of the Test Statistic\")\r\n if(alt==\"neq\"){\r\n  z1 <- qt(alpha/2,n-1)\r\n  z2 <- qt(1-alpha/2,df=n-1)\r\n  polygon(c(min(x),x[x<z1],z1,z1),\r\n          c(0,z_h0[x<z1],dt(z1,df=n-1),0), col=2,density = 20,angle = -45)\r\n  polygon(c(z2,z2,x[x>z2],max(x)),\r\n          c(0,dt(z2,df=n-1),z_h0[x>z2],0),col=2,density = 20,angle = -45)\r\n  polygon(c(min(x),x[x<z1],z1,z1),\r\n          c(0,z_h1[x<z1],dt(z1-(mu_star_case-mu_0)/sqrt(s2/n),df=n-1),0), col=3,density=20)\r\n  polygon(c(z2,z2,x[x>z2],max(x)),\r\n          c(0,dt(z2-(mu_star_case-mu_0)/sqrt(s2/n),df=n-1),z_h1[x>z2],0),col=3,density = 20)\r\n  abline(v=c(z1,z2),lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=2)\r\n  \r\n }else if(alt==\"<\"){\r\n  z<- qt(alpha,df=n-1)\r\n  polygon(c(min(x),x[x<z],z,z),\r\n          c(0,z_h0[x<z],dt(z,df=n-1),0), col=2,density = 20,angle = -45)\r\n  polygon(c(min(x),x[x<z],z,z),\r\n          c(0,z_h1[x<z],dt(z-(mu_star_case-mu_0)/sqrt(s2/n),df=n-1),0), col=3,density=20)\r\n  abline(v=z,lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=3)\r\n  \r\n }else{\r\n  z <- qt(1-alpha,df=n-1)\r\n  polygon(c(z,z,x[x>z],max(x)),\r\n          c(0,dt(z,df=n-1),z_h0[x>z],0),col=2,density = 20,angle = -45)\r\n  polygon(c(z,z,x[x>z],max(x)),\r\n          c(0,dt(z-(mu_star_case-mu_0)/sqrt(s2/n),df=n-1),z_h1[x>z],0),col=3,density = 20)\r\n  abline(v=z,lty=2,lwd=2,col=1)\r\n  lines(x,z_h1,lwd=2,col=4)\r\n }\r\n \r\n lines(x,z_h0,lwd=2)\r\n abline(v = mu_0,lty=2)\r\n abline(v = (mu_star_case-mu_0)/sqrt(s2/n),lty=2)\r\n \r\n return(invisible(POWER_VALUE))\r\n}\r\n\r\n\r\n\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n \r\n \r\n # Application title\r\n titlePanel(withMathJax(\"Power Curves\")),\r\n \r\n # Sidebar with a slider input for number of bins \r\n sidebarLayout(\r\n  sidebarPanel(\r\n   \r\n   \r\n   selectInput(\"test\", \"Hypothesis Test:\", c(\"Z-test\" = \"z\",\r\n                                             \"One-sample t-test\" = \"t\")),\r\n   selectInput(\"alt\", \"Alternative:\", c(\"two-sided\" = \"neq\",\r\n                                        \"one-sided, less than\" = \"<\",\r\n                                        \"one-sided, more than\" = \">\")),\r\n   sliderInput(\"alpha\", \"Significance Level\", min=0.01, max=0.5, value = 0.05,step =0.01),\r\n   sliderInput(\"n\", \"Sample Size\", min=3, max=100, value=10, step= 1),\r\n   sliderInput(\"sig2\", \"Population/Sample Variance\", min=1, max=16, value=1, step=0.5),\r\n   sliderInput(\"mustar\", \"Mu-star, case under H1\", min=-3, max=3, value=0.9, step=0.1),\r\n   \r\n   \r\n   h3(\"Power:\"),\r\n   textOutput(\"Power\",inline=TRUE),\r\n   \r\n   h3(\"Key:\"),\r\n   h4(\"{YET TO BE COMPLETED!!!}\"),\r\n   \r\n   width = 3\r\n   \r\n  ),\r\n  \r\n  \r\n  # Show a plot of the generated distribution\r\n  mainPanel(\r\n   plotOutput(\"Plots\", height = \"1000px\")\r\n  )\r\n )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n r <- reactiveValues(seed = as.numeric(Sys.time()))\r\n \r\n \r\n output$Plots <- renderPlot({\r\n  \r\n  if(input$test == \"z\"){\r\n   pow_val <- z_test_power(mu_star_case = as.numeric(input$mustar), \r\n                           alt = input$alt, \r\n                           mu_0 = 0, \r\n                           sigma2 = as.numeric(input$sig2), \r\n                           n = as.numeric(input$n), \r\n                           alpha = as.numeric(input$alpha))\r\n  }else{\r\n   pow_val <- one_sample_t_test_power(mu_star_case = as.numeric(input$mustar), \r\n                                      alt = input$alt, \r\n                                      mu_0 = 0, \r\n                                      s2 = as.numeric(input$sig2), \r\n                                      n = as.numeric(input$n), \r\n                                      alpha = as.numeric(input$alpha))\r\n  }\r\n  output$Power <- renderText({round(pow_val, 4)})\r\n })\r\n \r\n \r\n \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
